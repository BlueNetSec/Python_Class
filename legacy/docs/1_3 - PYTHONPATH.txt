Exercise 1_3: Hide and Go Seek, Python Edition

Exercise Summary:
Python programmers often use tricks to make accessing a complex structure of modules easier.  One of these is the use of the PYTHONPATH variable in combination with __init__.py.  Understanding how these work together can make troubleshooting programs written by other people an easier task.

Learning Objectives:
1.1.3.	 PYTHONPATH

Narrative:
Troubleshoot these programs to get them functioning.

Instructions:
1)	Try executing ex1_3_1.py after unzipping the folder structure.  What is wrong?  How can you fix it?
    Scan 127.0.0.1 for various opened and closed ports to see how the script reacts.
2)  Get ex1_3_2.py to execute.  What needs to be edited to get this functioning?
    Identify the changed functionality to the script.  Attempt new scans using the new functionality.  Does it work correctly?  What fixes should be made?
3)  Describe the best practices for using PYTHONPATH and __init__.py files.  Discuss.

Materials:
1)	ex1_3_1.zip
2)  ex1_3_2.zip

References:
-	J. Filippazzo, “Editing PYTHONPATH (or "Where's my module?!"),” Lee On Coding Full Atom, 17-Sep-2012. [Online]. Available: https://leemendelowitz.github.io/blog/how-does-python-find-packages.html. [Accessed: 16-Mar-2017].
-   V. Summers, “How to Set Your Python Path,” Techwalla. [Online]. Available: https://www.techwalla.com/articles/how-to-set-your-python-path. [Accessed: 11-Mar-2017].


Instructor Notes:
1)  For ex1_3_1 there is a hardcoded PYTHONPATH variable added to include the host object in the scanner module file.  This should be a relative directory add rather than a hardcoded one.
2)  For ex1_3_2 the __init__.py file has a __all__ variable assigned in it.  This limits the functions that will be imported from the submodules with * is called.  Additionally, there is a fence port error in scan_ports due to the use of xrange, it will never scan the max port.
